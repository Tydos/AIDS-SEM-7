# -*- coding: utf-8 -*-
"""DL5-GRU+LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aYxAkqLIauLWOV5ZynX9BvZWN450wZ33
"""

import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, GRU, Dense

# Load the IMDb dataset
num_words = 10000  # Limit the vocabulary to the top 10,000 words
max_sequence_length = 200  # Limit the sequence length to 200 words
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words)

# Preprocess the data
x_train = pad_sequences(x_train, maxlen=max_sequence_length)
x_test = pad_sequences(x_test, maxlen=max_sequence_length)

# Build the GRU model
model = Sequential()
model.add(Embedding(input_dim=num_words, output_dim=128, input_length=max_sequence_length))
model.add(GRU(128))  # GRU layer with 128 units
model.add(Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=1, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print("Test accuracy: {:.2f}%".format(accuracy * 100))

import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load the IMDb dataset
num_words = 10000  # Limit the vocabulary to the top 10,000 words
max_sequence_length = 200  # Limit the sequence length to 200 words
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words)

# Preprocess the data
x_train = pad_sequences(x_train, maxlen=max_sequence_length)
x_test = pad_sequences(x_test, maxlen=max_sequence_length)

# Build the LSTM model
model = Sequential()
model.add(Embedding(input_dim=num_words, output_dim=128, input_length=max_sequence_length))
model.add(LSTM(128))  # LSTM layer with 128 units
model.add(Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=1, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print("Test accuracy: {:.2f}%".format(accuracy * 100))

